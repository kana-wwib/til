Inheritance works in a different way 

/************************
 * Function constructor
 ************************/

//inheritance works since it's in the prototype property of the function constructor
//**alway write function constructors with a capital letter**

var Person = function(name, yearOfBirth, job) {
  this.name = name;
  this.yearOfBirth = yearOfBirth;
  this.job = job;
}
 
Person.prototype.calculateAge = function() {
  console.log(2016 - this.yearOfBirth);
};
 
Person.prototype.lastName = 'Smith';
 
var john = new Person('John', 1990, 'teacher');
 
john.calculateAge(); //works!
console.log(john.lastName); //works!



/************************
 * Object.create
 ************************/
 
var personProto = {
  calculateAge: function() {
    console.log(2016 - this.yearOfBirth);
  }
};

var john = Object.create(personProto);
john.name = 'John';
john.yearOfBirth = 1998;
john.job = 'teacher';

var jane = Object.create(personProto, {
  name: { value: 'Jane' },
  yearOfBirth: { value: 1969 },
  job: { value: 'designer' }
});


**NOTE**
The difference between object.create and function construction is 
object.create → an object inherits directly from first argument 
function constructor → object inherits from constructor's prototype property 



/********************************************************
 * IIFE (=Immediately Invoke functions expressions)
 ********************************************************/
 
 (function() {
  var score = Math.random() * 10;
  console.log(score >= 5);
})();

console.log(score); //ERROR can not access from outside of the scope

(function (goodLuck) {
  var score = Math.random() * 10;
  console.log(score >= 5 - goodLuck);
})(5);


/*******************************
 * Bind, call and apply
 *******************************/

var john = {
  name: 'John',
  age: 26,
  job: 'teacher',
  presentation: function(style, timeOfDay) {
    if (style === 'formal') {
      console.log(~~~ this.name + this.job + this.age + ~~~ )
    } else if (style === 'friendly') {
      console.log(~~~ + this.name + this.job + this.age + timeOfDay ~~~)
    }
  }
}
 
var emily = {
  name: 'Emily',
  age: 35,
  job: 'designer',
};
// Call method  borrowing = arguments as objects

john.presentation.call(emily, 'friendly', 'afternoon');
// Apply method = accepts arguments as an array

john.presentation.apply(emily, ['friendly', 'afternoon']); //Not working this time
// Bind method = preset some arguments

var emilyFormal = john.presentation.bind(emily, 'formal');
emilyFormal('afternoon');


//まとめ
- callback = 高階関数の引数に渡すための関数 
- 高階関数 = 関数を受け取る関数
- closure = 外部の変数を取得し処理するオブジェクト
- Functions returning functions = 変数に格納→引数を与える→変数を使い引数をまとめて渡し呼び出す。
- IIFF = グローバルに影響せず、ローカルスコープを作ってすぐ実行できる
[bind/call/apply] 
*第一引数: thisの値としたいオブジェクトを指定する
- bind = 新関数を生成し、他の関数と紐付ける
- call = そのまま実行（新たな関数なし）、第二引数:オブジェクト
- apply = callと同じだが、第二引数:配列


